# Disables CI builds entirely, then commits don't trigger a build
trigger:
- prod
- uat
- dev

resources:
- repo: self

# Specific variables to use, in our case it is just one and at the pipeline level 
variables:
  ${{ if eq(variables['Build.SourceBranch'],'refs/heads/prod') }}:
    stage: 'prod'
  ${{ if eq(variables['Build.SourceBranch'],'refs/heads/uat') }}:
    stage: 'uat'
  ${{ if eq(variables['Build.SourceBranch'],'refs/heads/dev') }}:
    stage: 'dev'
  # stage env file name
  envFileName: 'env.$(stage)'
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1133d4cf-7502-4ccb-85c6-ba0abc877451'
  imageRepository: 'yoletechdevopsdockercomposenodejsmysql'
  containerRegistry: 'yole0devops0c1.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'yole0devops0c15790d863-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      name: 'envFile'
      displayName: 'Download secure file'
      inputs:
        secureFile: $(envFileName)
    
    - bash: |
        cp $(envFile.secureFilePath) .env
        cp $(envFile.secureFilePath) app/.env
        ls -alF
        ls -alF app/
        cat app/.env
      displayName: "Copy env File"
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          $(stage)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'yoletechdevopsdockercomposenodejsmysql.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/$(stage)/deployment.yml
                $(Pipeline.Workspace)/manifests/$(stage)/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

